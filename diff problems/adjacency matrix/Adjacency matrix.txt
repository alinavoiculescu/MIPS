#input:
4
3
0
1
1
3
2
1
#output:
0 1 0 0 
1 0 1 1 
0 1 0 0 
0 1 0 0 

# citirea unei matrice de adiacenta in MIPS 
.data
	matrix:   .space 1600 			# matrice de 20 * 20 * 4 (fiecare element are 4 bytes in memorie)
	n:	  .space 4			# numarul de linii = numarul de coloane
	nrMuchii: .space 4			# numarul de muchii de citit
	strsp:	  .asciiz " "
	strnl:	  .asciiz "\n"
.text

main:
	li $v0, 5				# apel sistem READ WORD
	syscall
	
	sw $v0, n				# val. citita este in $v0 si o mut in n

	li $v0, 5				# apel sistem READ WORD
	syscall

	sw $v0, nrMuchii			# val. citita este in $v0 si o mut in nrMuchii

	# am citit acum n si nrMuchii, pot sa simulez urmatorul for:
	# for (int i = 0; i < nrMuchii; i++)
	# {
	#	scanf("%d", &left);
	#	scanf("%d", &right);
	#	matrix[left][right] = 1;
	#	matrix[right][left] = 1;
	# }

	# pentru a accesa matrix[left][right] voi avea un 
	# matrix($t4), unde $t4 va fi 4*(left * n + right)
	# apoi, simetric, pentru matrix[right][left]

	lw $t0, nrMuchii			# iau nrMuchii in $t0
	lw $t6, n				# punem n in $t6
	li $t1, 0				# pe post de i din for-ul de mai sus
for_edges:
	bge $t1, $t0, afis_matrix		# execut cat timp i < nrMuchii, i.e. cat timp $t1 < $t0
						# deci ies cand $t1 >= $t0
	li $v0, 5
	syscall
	move $t2, $v0				# $t2 este acum "left"
	
	li $v0, 5
	syscall
	move $t3, $v0				# $t3 este acum "right"

	# calculam, pentru inceput, left * n in $t4
	mul $t4, $t2, $t6			# $t4 = $t2 (left) * $t6 (n)
	# la rezultat, adaugam right
	add $t4, $t4, $t3			# $t4 = $t4 + $t3 (right)
	# il inmultim cu 4
	mul $t4, $t4, 4				# $t4 = $t4 * 4

	# trebuie acum ca matrix($t4) sa fie egal cu 1
	li $t5, 1
	sw $t5, matrix($t4)

	# analog pentru right, refolosim $t4
	mul $t4, $t3, $t6
	add $t4, $t4, $t2
	mul $t4, $t4, 4
	sw $t5, matrix($t4)

	addi $t1, 1				# $t1 := $t1 + 1 i.e. i++
	j for_edges

afis_matrix:
	# afisam matricea matrix
	lw $t0, n				# pun n in $t0
	li $t1, 0				# pe post de i
	for_lines:
		bge $t1, $t0, et_exit		# daca i >= n => et_exit, pt. ca execut cat timp i < n

		li $t2, 0			# pe post de j
		for_columns:
			bge $t2, $t0, cont	# daca j >= n => cont, ma leg de for-ul principal, unde afisez "\n" si merg la linia urmatoare
			
			# avem acum $t1 si $t2, putem prelua
			# matrix[$t1][$t2]
			# adica elementul de la offsetul 4*($t1 * $t0 + $t2)
			mul $t3, $t1, $t0
			add $t3, $t3, $t2
			mul $t3, $t3, 4

			# afisam matrix($t3)
			lw $a0, matrix($t3)
			li $v0, 1		# PRINT WORD
			syscall

			la $a0, strsp
			li $v0, 4		# PRINT STRING
			syscall

			addi $t2, 1
			j for_columns

	cont:
		la $a0, strnl
		li $v0, 4			# PRINT STRING
		syscall

		addi $t1, 1			# i++
		j for_lines
	

et_exit:
	li $v0, 10
	syscall